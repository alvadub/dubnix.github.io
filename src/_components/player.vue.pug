template(lang='pug')
  .Player(v-bind:class='state')
    span(v-if='state === "closed"' v-html='innerHTML' v-on:click='open')
    div(v-else)
      .Player--title.flex
        button.col.btn(v-on:click='close')
          svg: use(xlink:href='#x-cancel')
        span.col {{title}}
      .Player--canvas(ref='player')
      .Player--controls.flex
        button.col.btn(v-on:click='stop' v-if='state !== "stopped"')
          svg: use(xlink:href='#x-stop')
        button.col.btn(v-on:click='toggle')
          svg(v-if='state === "playing"'): use(xlink:href='#x-pause')
          svg(v-if='state !== "playing"'): use(xlink:href='#x-play')
        span.col {{current}}/{{duration}}

script.
  /* global WaveSurfer */

  const TITLE = document.title;

  function formatTime(time) {
    return [
      Math.floor((time % 3600) / 60),
      `00${Math.floor(time % 60)}`.slice(-2),
    ].join(':');
  };

  function initPlayer() {
    this.$refs.wavesurfer = WaveSurfer.create({
      container: this.$refs.player,
      barWidth: 3,
      cursorWidth: 0,
      waveColor: '#DDDDDD',
      progressColor: '#01FF70',
    });

    this.$refs.wavesurfer.load(this.src);

    this.$refs.wavesurfer.on('audioprocess', () => {
      this.current = formatTime(this.$refs.wavesurfer.getCurrentTime());
    });

    this.$refs.wavesurfer.on('ready', () => {
      this.duration = formatTime(this.$refs.wavesurfer.getDuration());
      this.play();
    });

    this.$refs.wavesurfer.on('finish', () => {
      const offset = PLAYERS.indexOf(this);
      const key = offset === PLAYERS.length - 1 ? 0 : offset + 1;

      PLAYERS[key].open();
      PLAYERS[key].play();
    });
  }

  const PLAYERS = [];

  export default {
    created() {
      PLAYERS.push(this);
    },
    data() {
      return {
        title: 'Audio',
        state: 'closed',
        current: '00:00',
        duration: '00:00',
        innerHTML: '(inherited)',
      };
    },
    methods: {
      toggle() {
        if (this.state !== 'playing') {
          this.play();
        } else {
          this.pause();
        }
      },
      pause() {
        document.title = `${TITLE} - Playing "${this.title}" (paused)`;

        if (this.$refs.wavesurfer) {
          this.$refs.wavesurfer.pause();
        }

        this.state = 'paused';
      },
      stop() {
        document.title = `${TITLE} - Playing "${this.title}" (stopped)`;

        if (this.$refs.wavesurfer) {
          this.$refs.wavesurfer.stop();
        }

        this.state = 'stopped';
      },
      play() {
        document.title = `${TITLE} - Now playing "${this.title}"`;

        if (this.$refs.wavesurfer) {
          this.$refs.wavesurfer.play();
        }

        this.state = 'playing';
      },
      open(e) {
        e.preventDefault();

        document.title = `${TITLE} - Loading "${this.title}"`;

        setTimeout(initPlayer.bind(this));

        PLAYERS.forEach((player) => {
          if (player.state !== 'closed') {
            player.close();
          }
        });

        this.state = 'stopped';
      },
      close() {
        document.title = TITLE;

        if (this.$refs.wavesurfer) {
          this.$refs.wavesurfer.destroy();
          this.$refs.wavesurfer = null;
        }

        this.state = 'closed';
      },
    },
  };
